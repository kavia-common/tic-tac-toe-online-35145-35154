{"is_source_file": true, "format": "JavaScript", "description": "This file is a server-side JavaScript source code implementing an Express.js web server for a database visualizer application. It handles configuration loading, database connection testing, and API endpoints for retrieving database tables and data across multiple database types (PostgreSQL, MySQL, SQLite, MongoDB). It also serves static files and sets security headers.", "external_files": ["path", "fs", "pg", "mysql2/promise", "sqlite3", "mongodb"], "external_methods": ["require", "fs.existsSync", "fs.readFileSync", "path.join", "app.use", "app.get", "res.setHeader", "res.header", "res.sendStatus", "express.static", "new Pool", "mysql.createConnection", "new sqlite3.Database", "new MongoClient", "client.connect", "client.db", "db.listCollections", "db.collection", "collection.find", "collection.find().limit", "client.close", "pool.query", "pool.end", "connection.execute", "connection.end", "db.close", "app.listen", "console.log"], "published": ["loadEnvFiles", "testConnections", "handleApiRequest"], "classes": [{"name": "DatabaseAdapter", "description": "Abstract base class for database adapters, providing interface methods for testing connection, retrieving tables, and data."}, {"name": "SQLAdapter", "description": "Abstract class extending DatabaseAdapter, providing common SQL execution methods and table/data retrieval logic."}, {"name": "PostgresAdapter", "description": "Adapter for PostgreSQL databases, implementing execute, getTableQuery, and getDataQuery methods."}, {"name": "MySQLAdapter", "description": "Adapter for MySQL databases, implementing execute, getTableQuery, and getDataQuery methods."}, {"name": "SQLiteAdapter", "description": "Adapter for SQLite databases, implementing execute, getTableQuery, and getDataQuery methods."}, {"name": "MongoDBAdapter", "description": "Adapter for MongoDB databases, implementing getTables and getData methods using MongoDB client."}], "methods": [{"name": "loadEnvFiles", "description": "Loads environment variables from .env files for different database types and merges them into process.env."}, {"name": "testConnections", "description": "Tests connections to configured databases and returns a list of successfully connected database types."}, {"name": "handleApiRequest", "description": "Generic handler for API requests that invokes a database adapter operation and returns JSON response."}], "calls": ["require", "fs.existsSync", "fs.readFileSync", "app.use", "app.get", "res.setHeader", "res.header", "res.sendStatus", "express.static", "loadEnvFiles", "testConnections", "handleApiRequest", "app.listen"], "search-terms": ["Express.js server", "multi-database support", "PostgreSQL adapter", "MongoDB client", "environment variable loading", "database connection testing", "API endpoints for database info"], "state": 2, "file_id": 5, "knowledge_revision": 19, "git_revision": "f122b40b62f671f291ef21dcae57795ac804c3a7", "revision_history": [{"15": "f122b40b62f671f291ef21dcae57795ac804c3a7"}, {"19": "f122b40b62f671f291ef21dcae57795ac804c3a7"}], "ctags": [], "filename": "tic_tac_toe_database/db_visualizer/server.js", "format-version": 4, "code-base-name": "https://github.com/kavia-common/tic-tac-toe-online-35145-35154.git:kavia-main"}